
# Database Selection for IoT Water Tank Management System

## Database Options Comparison

### 1. MongoDB (Recommended)

**Pros:**
✅ **Schema-less**: Perfect for IoT data that may evolve over time
✅ **JSON-native**: Directly stores JSON from ESP32 without conversion
✅ **Horizontal scaling**: Can handle large amounts of sensor data
✅ **Time-series friendly**: Efficient for timestamped sensor readings
✅ **Rich query capabilities**: Complex aggregations for analytics
✅ **Document-based**: Natural fit for sensor data objects
✅ **Cloud options**: MongoDB Atlas for easy deployment

**Cons:**
❌ Larger memory footprint
❌ Learning curve for SQL developers
❌ Requires separate installation

**Best for:** Production IoT systems, multiple sensors, future scalability

**Installation:**
```bash
# Ubuntu/Debian
sudo apt-get install -y mongodb

# macOS
brew tap mongodb/brew
brew install mongodb-community

# Windows
# Download from mongodb.com
```

**Connection String:**
```python
MONGO_URI = "mongodb://localhost:27017/water_tank_db"
```

### 2. SQLite (Alternative for Simple Projects)

**Pros:**
✅ **Zero configuration**: No separate database server needed
✅ **Lightweight**: Small footprint, perfect for single-device setups
✅ **Built-in Python support**: No additional drivers needed
✅ **ACID compliant**: Reliable transactions
✅ **SQL familiar**: Easy for developers who know SQL

**Cons:**
❌ Limited concurrent access
❌ No network access (local only)
❌ Less suitable for high-volume IoT data
❌ Rigid schema requirements

**Best for:** Prototypes, single-user systems, educational projects

**Flask Configuration for SQLite:**
```python
import sqlite3
from flask import g

DATABASE = 'water_tank.db'

def get_db():
    db = getattr(g, '_database', None)
    if db is None:
        db = g._database = sqlite3.connect(DATABASE)
    return db

@app.teardown_appcontext
def close_connection(exception):
    db = getattr(g, '_database', None)
    if db is not None:
        db.close()
```

### 3. PostgreSQL (Enterprise Option)

**Pros:**
✅ **Mature and stable**: Battle-tested in production
✅ **ACID compliance**: Strong consistency guarantees
✅ **JSON support**: Can handle both relational and document data
✅ **Time-series extensions**: TimescaleDB for IoT data
✅ **Strong ecosystem**: Many tools and libraries

**Cons:**
❌ More complex setup and administration
❌ Heavier resource usage
❌ Overkill for simple IoT projects

**Best for:** Large-scale enterprise IoT deployments

## Recommendation: MongoDB

For your water tank management project, **MongoDB is the best choice** because:

1. **Natural fit for IoT data**: Your ESP32 sends JSON data that MongoDB stores directly
2. **Flexible schema**: Easy to add new sensor types or data fields later
3. **Time-series optimization**: Efficient storage and querying of timestamped data
4. **Easy integration**: Flask-PyMongo makes connection simple
5. **Scalability**: Can grow with your project if you add multiple tanks/sensors

## Database Schema Design (MongoDB)

### Collections:

1. **sensor_data** - Stores all sensor readings
```json
{
  "_id": ObjectId("..."),
  "device_id": "ESP32_TANK_01",
  "top_sensor": 245,
  "bottom_sensor": 678,
  "motor_state": true,
  "auto_mode": true,
  "timestamp": ISODate("2024-01-15T10:30:00Z")
}
```

2. **commands** - Stores control commands from web interface
```json
{
  "_id": ObjectId("..."),
  "motor_command": "start",
  "timestamp": ISODate("2024-01-15T10:30:00Z"),
  "executed": false,
  "source": "web_interface"
}
```

3. **device_config** - Device configuration settings
```json
{
  "_id": ObjectId("..."),
  "device_id": "ESP32_TANK_01",
  "water_threshold": 500,
  "sensor_intervals": 5000,
  "auto_mode_enabled": true,
  "created_at": ISODate("2024-01-15T10:30:00Z")
}
```

## Connection Setup Steps

### MongoDB Setup:

1. **Install MongoDB Community Edition**
2. **Start MongoDB service:**
   ```bash
   # Linux
   sudo systemctl start mongod

   # macOS
   brew services start mongodb-community

   # Windows
   # Use MongoDB Compass or start as Windows service
   ```

3. **Install Python dependencies:**
   ```bash
   pip install pymongo flask-pymongo
   ```

4. **Configure Flask application:**
   ```python
   from flask_pymongo import PyMongo

   app.config["MONGO_URI"] = "mongodb://localhost:27017/water_tank_db"
   mongo = PyMongo(app)
   ```

### ESP32 to Database Connection Flow:

1. **ESP32** → HTTP POST → **Flask API** (/api/sensor-data)
2. **Flask** → Store data → **MongoDB** (sensor_data collection)
3. **Web Interface** → Fetch data → **Flask API** (/api/latest-data)
4. **Flask** → Query → **MongoDB** → Return JSON → **Web Interface**

## Data Flow Architecture:

```
ESP32 Sensors → WiFi → Flask API → MongoDB
                          ↓
Web Interface ← HTTP ← Flask API ← MongoDB
```

## Production Considerations:

### Security:
- Enable MongoDB authentication
- Use environment variables for credentials
- Implement API rate limiting
- Add HTTPS for web interface

### Performance:
- Create indexes on timestamp fields
- Implement data archiving for old records
- Use connection pooling
- Monitor database performance

### Backup:
- Regular MongoDB backups
- Data export capabilities
- Disaster recovery plan

This database setup will provide a robust foundation for your IoT water tank management system with room for future expansion and enhancement.
